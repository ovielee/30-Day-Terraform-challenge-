{"_id":"verbose","_rev":"13-1ddfc543efe53d9e782b450ae8fc22f2","name":"verbose","description":"Distributed Event Bus","dist-tags":{"latest":"0.2.3"},"versions":{"0.1.0":{"name":"verbose","description":"Remote event synchronization","version":"0.1.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Pedro Teixeira"}],"repository":{"type":"git","url":"http://github.com/pgte/emitter-node.git"},"bugs":{"url":"http://github.com/pgte/verbose/issues"},"engines":["node >= 0.8.1"],"main":"./node.js","dependencies":{"reconnect":"*","duplex-emitter":"*","node-uuid":"*","propagate":"*","colors":"*","duplexer":"*","through":"*"},"devDependencies":{"tap":"0.3.x","async":"*","event-stream":"*"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests/peer_list.js tests/messages.js tests/peer_stream.js tests/node.js tests/stream_emitter.js tests/hub.js","start":"node server.js"},"tags":["remote","event","emitter","synchronization","peer to peer"],"readme":"# remote-channel\n\nRemote peer-to-peer event synchronization\n\n## Install\n\n```bash\n$ npm install remote-channel\n```\n\n## Use\n\n### Instantiate\n\n```javascript\nvar RemoteChannel = require('remote-channel');\nvar remoteChannel = RemoteChannel();\n```\n\n### Connect\n\n```\n```\n\n## License\n\nMIT","readmeFilename":"README.md","_id":"verbose@0.1.0","dist":{"shasum":"199067b6af44709ca3c42ed8625c46a8d8211614","tarball":"https://registry.npmjs.org/verbose/-/verbose-0.1.0.tgz","integrity":"sha512-C9kZkAHAvsvuxVKE1RsWBJi+X5zNPQAIePekpGZVc8D+C+UBjJ8LvqcQjyE5HcuUPByS4Vx1M8uwQLCQJBrVCw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBIhBR850MwigfyQwfXJMnnb/RO+kCjWos/+r2vRNFyxAiBQ6qNFi9mJ2gJRgf0y+Vqa2Hw9oUyO/kt3TNZKib8Cwg=="}]},"_npmVersion":"1.1.65","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}]},"0.2.0":{"name":"verbose","description":"Remote event synchronization","version":"0.2.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Pedro Teixeira"}],"repository":{"type":"git","url":"http://github.com/pgte/emitter-node.git"},"bugs":{"url":"http://github.com/pgte/verbose/issues"},"engines":["node >= 0.8.1"],"main":"./node.js","dependencies":{"reconnect":"*","duplex-emitter":"*","node-uuid":"*","propagate":"*","invert-stream":"*"},"devDependencies":{"tap":"0.3.x","async":"*","event-stream":"*"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests/peer_pool.js tests/messages.js tests/peer_protocol.js tests/peer_stream.js tests/buffered_peer.js tests/node.js tests/stream_emitter.js","start":"node server.js"},"tags":["remote","event","emitter","synchronization","peer to peer"],"readme":"# remote-channel\n\nRemote peer-to-peer event synchronization\n\n## Install\n\n```bash\n$ npm install remote-channel\n```\n\n## Use\n\n### Instantiate\n\n```javascript\nvar RemoteChannel = require('remote-channel');\nvar remoteChannel = RemoteChannel();\n```\n\n### Connect\n\n```\n```\n\n## License\n\nMIT","readmeFilename":"README.md","_id":"verbose@0.2.0","dist":{"shasum":"4e0c8e4ddf98b8aa7000e53ee3f75fed3f597832","tarball":"https://registry.npmjs.org/verbose/-/verbose-0.2.0.tgz","integrity":"sha512-BzgjWQnUhphYTlI4udCP7XrrOYU1Na0pRtGtEgHviLmlTTHZbLiB16Am1pkI1qS5WdF55jFRHNyg+NbXY062zQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDSgtk+0PpzK5Tnyd1tU/afmLashZy7qI2CP75qlCTkEgIhAME4e7rA2O8KT9GiqUf845aqATBhfbep0m5cxXY4KVyL"}]},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}]},"0.2.1":{"name":"verbose","description":"Remote event synchronization","version":"0.2.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Pedro Teixeira"}],"repository":{"type":"git","url":"http://github.com/pgte/emitter-node.git"},"bugs":{"url":"http://github.com/pgte/verbose/issues"},"engines":["node >= 0.8.1"],"main":"./node.js","dependencies":{"reconnect":"*","duplex-emitter":"*","node-uuid":"*","propagate":"*","invert-stream":"*"},"devDependencies":{"tap":"0.3.x","async":"*","event-stream":"*"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests/peer_pool.js tests/messages.js tests/peer_protocol.js tests/peer_stream.js tests/buffered_peer.js tests/node.js tests/stream_emitter.js","start":"node server.js"},"tags":["remote","event","emitter","synchronization","peer to peer"],"readme":"# remote-channel [![Build Status](https://secure.travis-ci.org/pgte/verbose.png)](http://travis-ci.org/pgte/verbose)\n\n\nRemote peer-to-peer event synchronization\n\n## Install\n\n```bash\n$ npm install remote-channel\n```\n\n## Use\n\n### Instantiate\n\n```javascript\nvar RemoteChannel = require('remote-channel');\nvar remoteChannel = RemoteChannel();\n```\n\n### Connect\n\n```\n```\n\n## License\n\nMIT","readmeFilename":"README.md","_id":"verbose@0.2.1","dist":{"shasum":"7f7896d51a8aa477f2c4a3cb106362019db6fd67","tarball":"https://registry.npmjs.org/verbose/-/verbose-0.2.1.tgz","integrity":"sha512-fq6fDlM1xc5TQAm7XhlQLjprcZmuGEL2CieUquGwrQv+UC0g2L28rmjXtABeqmZSI/LnREXRWslPLrw54uOCxQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIB86IOpCqBkxWdJpi/z2YWZ6Cd/I1H3ywsOspMklqu+/AiEAn7UMkqaWPy/ba3b2f4UHJki0kCF0v6Xfo/wnxhH+v4A="}]},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}]},"0.2.2":{"name":"verbose","description":"Distributed Event Bus","version":"0.2.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Pedro Teixeira"}],"repository":{"type":"git","url":"http://github.com/pgte/emitter-node.git"},"bugs":{"url":"http://github.com/pgte/verbose/issues"},"engines":["node >= 0.8.1"],"main":"./node.js","dependencies":{"reconnect":"*","duplex-emitter":"*","node-uuid":"*","propagate":"*","invert-stream":"*"},"devDependencies":{"tap":"0.3.x","async":"*","event-stream":"*"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests/peer_pool.js tests/messages.js tests/peer_protocol.js tests/peer_stream.js tests/buffered_peer.js tests/node.js tests/stream_emitter.js","start":"node server.js"},"tags":["remote","event","emitter","synchronization","peer to peer"],"readme":"# verbose [![Build Status](https://secure.travis-ci.org/pgte/verbose.png)](http://travis-ci.org/pgte/verbose)\n\nDistributed event bus\n\n## Features\n\n* Automatic reconnect with back-off\n* Reconnect resilience: messages get buffered for retransmission if necessary\n* Create any topology of nodes\n* Pluggale transport\n\n## Create a Node\n\n```javascript\nvar verbose = require('verbose');\nvar node = verbose();\n```\n\nYou can also give it some options:\n\n```javascript\nvar options = {\n  node_id: 'NODE-ID-000001'\n};\n\nvar node = verbose(options);\n```\n\nHere are the options:\n\n| option              | description                                       |  default    |\n|---------------------|---------------------------------------------------|-------------|\n| node_id             | node identifier for other peers                   | random UUID |\n| timeout             | inactivity timeout (ms)                           | 60000       |\n| bufferTimeout       | maximum retransmit resilience                     | 900000      |\n| bufferMax           | maximum number of buffered messages kept by peer  | 1000        |\n| acknowledgeInterval | message acknowledge interva (ms)                  | 1000        |\n| maxPeers            | message acknowledge interva (ms)                  | 1000        |\n| transport           | transport name or object. If object, must provide a `listen` and a `connect` methods. See [example](https://github.com/pgte/verbose/blob/master/transport/tcp.js)                | \"tcp\"        |\n\n## Make it listen\n\n```javascript\nnode.listen(port);\n```\n\n## Connect to another node in another process\n\n```javascript\nnode.connect(port[, host]);\n```\n\n## Emit events on a node\n\n```javascript\nnode.emit('event', 'a', 1);\n```\n\n## Receive events\n\n```javascript\nnode.on('event', function() {\n  console.log('got event:', arguments);\n});\n```\n\n## End a Node\n\n```javascript\nnode.end();\n```\n\n## Underlying stream\n\nYou can access the underlying stream:\n\n```javascript\nnode.stream.on('end', function() {\n  console.log('node ended');\n});\n```\n\nBesides being a duplex stream, it emits the following events:\n\n* `connect` - when the peer connects to the remote peer (transport layer)\n* `peerid` - when the remote peer gets identified during the hand-shake protocol\n* `initialized` - when the peer handshakes with the remote peer\n* `acknowledge` - when there is an acknowledge message from the remote peer\n* `disconnect` - when a peer gets disconnected from the remote peer\n* `reconnect` - when the peer reconnects to the remote peer\n* `backoff` - when the reconnect algorithm has to back off because of an unsuccessful retry\n\n## Peer control\n\nWhen connecting you can get access to the peer object:\n\n```javascript\nvar peer = node.connect(port, host);\n```\n\nWhich you can then use to end:\n\n```javascript\npeer.end();\n```\n\n## Licence\n\nMIT\n","readmeFilename":"README.md","_id":"verbose@0.2.2","dist":{"shasum":"fe70dc7b2e4e39308baff809133591edce1792b7","tarball":"https://registry.npmjs.org/verbose/-/verbose-0.2.2.tgz","integrity":"sha512-wSieF162Gird8rQMkQCfVJF8PyPThAjb3Wbp268hwGLf9vbkpxi1i3bLsF480MXs2dJ3ArC150OSgjUa0/dj6Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCT4KCpfmFp/+wbKHFsE3BHiHjpMDvezAXG+pFoJPCeEAIhANn7TTqDUleSLkfCdvYYWZM5wv/TX8Ft/iEv4bc5rsEt"}]},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}]},"0.2.3":{"name":"verbose","description":"Distributed Event Bus","version":"0.2.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Pedro Teixeira"}],"repository":{"type":"git","url":"https://github.com/pgte/verbose.git"},"bugs":{"url":"http://github.com/pgte/verbose/issues"},"engines":["node >= 0.8.1"],"main":"./node.js","dependencies":{"reconnect":"*","duplex-emitter":"*","node-uuid":"*","propagate":"*","invert-stream":"*"},"devDependencies":{"tap":"0.3.x","async":"*","event-stream":"*"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests/peer_pool.js tests/messages.js tests/peer_protocol.js tests/peer_stream.js tests/buffered_peer.js tests/node.js tests/stream_emitter.js","start":"node server.js"},"tags":["remote","event","emitter","synchronization","peer to peer"],"readme":"# verbose [![Build Status](https://secure.travis-ci.org/pgte/verbose.png)](http://travis-ci.org/pgte/verbose)\n\nDistributed event bus\n\n## Features\n\n* Automatic reconnect with back-off\n* Reconnect resilience: messages get buffered for retransmission if necessary\n* Create any topology of nodes\n* Pluggale transport\n\n## Create a Node\n\n```javascript\nvar verbose = require('verbose');\nvar node = verbose();\n```\n\nYou can also give it some options:\n\n```javascript\nvar options = {\n  node_id: 'NODE-ID-000001'\n};\n\nvar node = verbose(options);\n```\n\nHere are the options:\n\n| option              | description                                       |  default    |\n|---------------------|---------------------------------------------------|-------------|\n| node_id             | node identifier for other peers                   | random UUID |\n| timeout             | inactivity timeout (ms)                           | 60000       |\n| bufferTimeout       | maximum retransmit resilience                     | 900000      |\n| bufferMax           | maximum number of buffered messages kept by peer  | 1000        |\n| acknowledgeInterval | message acknowledge interva (ms)                  | 1000        |\n| maxPeers            | message acknowledge interva (ms)                  | 1000        |\n| transport           | transport name or object. If object, must provide a `listen` and a `connect` methods. See [example](https://github.com/pgte/verbose/blob/master/transport/tcp.js)                | \"tcp\"        |\n\n## Make it listen\n\n```javascript\nnode.listen(port);\n```\n\n## Connect to another node in another process\n\n```javascript\nnode.connect(port[, host]);\n```\n\n## Emit events on a node\n\n```javascript\nnode.emit('event', 'a', 1);\n```\n\n## Receive events\n\n```javascript\nnode.on('event', function() {\n  console.log('got event:', arguments);\n});\n```\n\n## End a Node\n\n```javascript\nnode.end();\n```\n\n## Underlying stream\n\nYou can access the underlying stream:\n\n```javascript\nnode.stream.on('end', function() {\n  console.log('node ended');\n});\n```\n\nBesides being a duplex stream, it emits the following events:\n\n* `connect` - when the peer connects to the remote peer (transport layer)\n* `peerid` - when the remote peer gets identified during the hand-shake protocol\n* `initialized` - when the peer handshakes with the remote peer\n* `acknowledge` - when there is an acknowledge message from the remote peer\n* `disconnect` - when a peer gets disconnected from the remote peer\n* `reconnect` - when the peer reconnects to the remote peer\n* `backoff` - when the reconnect algorithm has to back off because of an unsuccessful retry\n\n## Peer control\n\nWhen connecting you can get access to the peer object:\n\n```javascript\nvar peer = node.connect(port, host);\n```\n\nWhich you can then use to end:\n\n```javascript\npeer.end();\n```\n\n## Licence\n\nMIT\n","readmeFilename":"README.md","_id":"verbose@0.2.3","dist":{"shasum":"6692911b9c5dcf8e421d1d413759401b4982c41f","tarball":"https://registry.npmjs.org/verbose/-/verbose-0.2.3.tgz","integrity":"sha512-083yQcZh4P9X8cUL7EnjVjIyfqWz7KfkMGDJfDP8Tic5O4xlHEfmmNQGxdH+iHbJbugyLPZnHENoM5T3zlSOoA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDxM9osc2OVEjECdA8ljxEzdAGHA8JIORIMltMr9hbV8AIhAMK0wFzgkt8CuSbWbqJ7yGwyMMGO0hjHGdf7ryD6CyU7"}]},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}]}},"readme":"# remote-channel\n\nRemote peer-to-peer event synchronization\n\n## Install\n\n```bash\n$ npm install remote-channel\n```\n\n## Use\n\n### Instantiate\n\n```javascript\nvar RemoteChannel = require('remote-channel');\nvar remoteChannel = RemoteChannel();\n```\n\n### Connect\n\n```\n```\n\n## License\n\nMIT","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"time":{"modified":"2022-06-28T10:06:47.859Z","created":"2013-01-17T16:12:03.538Z","0.1.0":"2013-01-17T16:12:05.112Z","0.2.0":"2013-02-18T23:39:01.578Z","0.2.1":"2013-03-02T13:23:08.093Z","0.2.2":"2013-03-07T11:17:37.104Z","0.2.3":"2013-03-07T12:54:36.471Z"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"https://github.com/pgte/verbose.git"}}