{"_id":"shoe","_rev":"50-0dafce49f13bd89e2fb4773fdb28a2d8","name":"shoe","description":"streaming sockjs for node and the browser","dist-tags":{"latest":"0.0.15"},"versions":{"0.0.0":{"name":"shoe","version":"0.0.0","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"~0.3.1","sockjs-client":"git://github.com/substack/sockjs-client.git#browserify-npm"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"","_id":"shoe@0.0.0","dist":{"shasum":"21e6f56812dbafd2f13c4c849e5ee0e1b29a0928","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.0.tgz","integrity":"sha512-Eh9s9ezNaIvtJkqOqlMxQ0vvlD480xdPljE6jy0c1Mf3sgjJgzAZ80qTINTTeCY2ukJkLVjjYBQADtiJAkiGcg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCID4hEJBuKyScTCXsZ/DwkEl8AGk2CWOeACoLYZhs2nhdAiBzMjZrsXpNRZAgcb/ydFMPKveogxoeHWSbRazcq4YInA=="}]},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.1":{"name":"shoe","version":"0.0.1","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"~0.3.1","sockjs-client":"git://github.com/substack/sockjs-client.git#browserify-npm"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"","_id":"shoe@0.0.1","dist":{"shasum":"9129335e0da066e9308a8056ff925e921da09461","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.1.tgz","integrity":"sha512-FQaqfcxZuRAJVwum4sRmdXx3zF+vXow8+JJ7AxuvEQ554tMN9ZflTpwpg3Zev8gbpd9s9Xn+TPbt7cuh1zEIHA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICYMS3ykWxfxIUYBKb8i6M5OtUf9WsogjUZ4MHs17WVHAiEA8dCTA0iUMCu76ZeUFVkAMbrITSLbRkFfBQ8Gzrz3PSo="}]},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.2":{"name":"shoe","version":"0.0.2","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"~0.3.1","sockjs-client":"git://github.com/substack/sockjs-client.git#browserify-npm"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"","_id":"shoe@0.0.2","dist":{"shasum":"2eeb57661af76410526eca426b191b5c0ae75cd8","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.2.tgz","integrity":"sha512-TMBs+qYwx1gHC1ggP0mBHB1ANRafttDz0u/l4865p/adBEeTTF4yfR5YWhD+E8Jz9oGkN75/qLnkrp39rTTKKg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDyq87gHRY45XPtUmD01ke5FGADbTdbd0pv56Tiw6xkxAiEArPRtlcVgNVKPpL6yayxngJweZhFSYbAwZ8xxoFscFgs="}]},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.3":{"name":"shoe","version":"0.0.3","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"~0.3.1","sockjs-client":"git://github.com/substack/sockjs-client.git#browserify-npm"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"","_id":"shoe@0.0.3","dist":{"shasum":"c7a251838229d913d6973015e5acd8690126ab82","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.3.tgz","integrity":"sha512-r2IZpUXBezrV4hWH8yzBrYNlWlId7k1U2afYQwgA7ahMm7u4sWtcmAyteYKJmKJJvyDCpbzmqhquJOe3pNPOng==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDPqnlY7GkrTnnHTvODFIGxP6rN50npBbpovN7YQ0fPywIhAJUTr9jw+cBp/fi8x4HO9mA3Wy6RP1uOJsYFb28cc/aR"}]},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.4":{"name":"shoe","version":"0.0.4","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"~0.3.1","sockjs-client":"git://github.com/substack/sockjs-client.git#browserify-npm"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"","_id":"shoe@0.0.4","dist":{"shasum":"f0417cae19c8d14aed0fec889754b06e8ceff82e","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.4.tgz","integrity":"sha512-szoHYhSGJ0bbflHWYbjTgjDBdq+4eSTF4NjyKAsoH9skuxPUFZgQggMq8vpD7uFd1WG9U3+9WG2k1Hzi5vRa5Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHeUOSNG7whlqjN4NoOQny2AAoYk0Amh+rNoY781DLpbAiBlfy/Sr3oQXALETSlvJPe/2hiZexC+mA741WhccvJoAg=="}]},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.5":{"name":"shoe","version":"0.0.5","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs-windows":"~0.3.1","sockjs-client":"git://github.com/substack/sockjs-client.git#browserify-npm"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"","_id":"shoe@0.0.5","dist":{"shasum":"7b42dc20aca63166ac57f14852d495a1ccd3fbb3","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.5.tgz","integrity":"sha512-b/G1MDgln1h/boxVw57i5ykKxzcYuaHAndEsK2TsCP96h95aDwVuIszwONNEnAux+6VcpO6eY65USLGG+uOTzA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDohzlwUXohLoaDH5Qnxj72drIdcRYU9FR9c92lgEgNsQIhAJSBZORatxjXtLJHlS5/2T0idYsXHGPNjSlBsBW72zhR"}]},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.6":{"name":"shoe","version":"0.0.6","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"~0.3.1","sockjs-client":"git://github.com/substack/sockjs-client.git#browserify-npm"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"shoe\n====\n\nStreaming sockjs for node and the browser.\n\nThis is a more streaming,\n[more unixy](http://www.faqs.org/docs/artu/ch01s06.html)\ntake on [sockjs](https://github.com/sockjs/sockjs-node).\n\n* works with [browserify](https://github.com/substack/node-browserify)\n([modularity](http://www.faqs.org/docs/artu/ch01s06.html#id2877537))\n* stream all the things\n([composition](http://www.faqs.org/docs/artu/ch01s06.html#id2877684))\n* emits a `'log'` event instead of spamming stdout\n([silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450))\n\n![shoe point javascript](http://substack.net/images/shoe.png)\n\nexample\n=======\n\nstream all the things\n---------------------\n\nBrowser code that takes in a stream of 0s and 1s from the server and inverts\nthem:\n\n``` js\nvar shoe = require('shoe');\nvar domready = require('domready');\nvar es = require('event-stream');\n\ndomready(function () {\n    var result = document.getElementById('result');\n    \n    var stream = shoe('/invert');\n    var s = es.mapSync(function (msg) {\n        result.appendChild(document.createTextNode(msg));\n        return String(Number(msg)^1);\n    });\n    s.pipe(stream).pipe(s);\n});\n```\n\nServer code that hosts some static files and emits 0s and 1s:\n\n``` js\nvar shoe = require('shoe');\nvar http = require('http');\n\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var iv = setInterval(function () {\n        stream.write(Math.floor(Math.random() * 2));\n    }, 250);\n    \n    stream.on('end', function () {\n        clearInterval(iv);\n    });\n    \n    stream.pipe(process.stdout, { end : false });\n});\nsock.install(server, '/invert');\n```\n\nThe server emits 0s and 1s to the browser, the browser inverts them and sends\nthem back, and the server dumps the binary digits to stdout.\n\nBy default, there's no logspam on stdout to clutter the output, which is a\nfrustrating trend in realtimey websocket libraries that violates the\n[rule of silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450).\n\nJust wait for a client to connect and you'll see:\n\n```\n$ node server.js\n001011010101101000101110010000100\n```\n\nwith dnode\n----------\n\nSince dnode has a simple streaming api it's very simple to plug into shoe.\n\nJust hack up some browser code:\n\n``` js\nvar domready = require('domready');\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\ndomready(function () {\n    var result = document.getElementById('result');\n    var stream = shoe('/dnode');\n    \n    var d = dnode();\n    d.on('remote', function (remote) {\n        remote.transform('beep', function (s) {\n            result.textContent = 'beep => ' + s;\n        });\n    });\n    d.pipe(stream).pipe(d);\n});\n```\nand hack up a server piping shoe streams into dnode:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar http = require('http');\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var d = dnode({\n        transform : function (s, cb) {\n            var res = s.replace(/[aeiou]{2,}/, 'oo').toUpperCase();\n            cb(res);\n        }\n    });\n    d.pipe(stream).pipe(d);\n});\nsock.install(server, '/dnode');\n```\n\nThen open up `localhost:9999` in your browser and you should see:\n\n```\nbeep => BOOP\n```\n\nwith express or connect\n-----------------------\n\nyou must pass the return value of `app.listen(port)`\n\n``` js\nvar shoe = require('shoe');\n\nvar express = require('express')\nvar app = express()\n\nvar sock = shoe(function (stream) { ... });\n\n// *** must pass expcess/connect apps like this:\nsock.install(app.listen(9999), '/dnode');\n```\n\nbrowser methods\n===============\n\n``` js\nvar shoe = require('shoe')\n```\n\nvar stream = shoe(uri, cb)\n--------------------------\n\nReturn a readable/writable stream from the sockjs path `uri`.\n`uri` may be a full uri or just a path.\n\n`shoe` will emit a `'connect'` event when the connection is actually open,\n(just like in [net](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)).\nwrites performed before the `'connect'` event will be buffered. passing in `cb` to \nshoe is a shortcut for `shoe(uri).on('connect', cb)`\n\nserver methods\n==============\n\n``` js\nvar shoe = require('shoe')\n```\n\nAll the methods from the sockjs exports objects are attached onto the `shoe`\nfunction, but the `shoe()` function itself is special.\n\nvar sock = shoe(opts, cb)\n-------------------------\n\nCreate a server with `sockjs.createServer(opts)` except this function also adds\nthe `.install()` function below.\n\nIf `cb` is specified, it fires `cb(stream)` on `'connection'` events.\n\nsock.install(server, opts)\n--------------------------\n\nCall `sock.installHandler()` with the default option of spamming stdout with log\nmessages switched off in place of just emitting `'log'` messages\non the `sock` object instead. This is a much less spammy default that gets out\nof your way.\n\nIf `opts` is a string, use it as the `opts.prefix`.\n\nserver events\n=============\n\nAll the messages that sockjs normally emits will be available on the `sock`\nobject plus the events below:\n\nsock.on('log', function (severity, msg) { ... })\n------------------------------------------------\n\nUsing the default logger with `sock.install()` will cause these `'log'` messages\nto be emitted instead of spamming stdout.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install shoe\n```\n\nlicense\n=======\n\nMIT\n","_id":"shoe@0.0.6","dist":{"shasum":"169a11e009e6a46c5eb5ce995bf5f9c2bda4be32","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.6.tgz","integrity":"sha512-6B/+ywD66XNXHYNF69ABLLbduN+zMZTaTNFVluRutY/naip9864rIsSCm5B20KRXFVGoRi4Cbq1Ux+Z/rD17Tg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHEbdclwlvcDeYVKh38auDs8CM4l+t1mJCrH/QOChl1kAiAJ8HhQpNNt77t0Eq19Lf8O4/IioiMb5TxA9ev7d2X+OQ=="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.7":{"name":"shoe","version":"0.0.7","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"~0.3.1","sockjs-client":"git://github.com/substack/sockjs-client.git#browserify-npm"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"shoe\n====\n\nStreaming sockjs for node and the browser.\n\nThis is a more streaming,\n[more unixy](http://www.faqs.org/docs/artu/ch01s06.html)\ntake on [sockjs](https://github.com/sockjs/sockjs-node).\n\n* works with [browserify](https://github.com/substack/node-browserify)\n([modularity](http://www.faqs.org/docs/artu/ch01s06.html#id2877537))\n* stream all the things\n([composition](http://www.faqs.org/docs/artu/ch01s06.html#id2877684))\n* emits a `'log'` event instead of spamming stdout\n([silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450))\n\n![shoe point javascript](http://substack.net/images/shoe.png)\n\nexample\n=======\n\nstream all the things\n---------------------\n\nBrowser code that takes in a stream of 0s and 1s from the server and inverts\nthem:\n\n``` js\nvar shoe = require('shoe');\nvar domready = require('domready');\nvar es = require('event-stream');\n\ndomready(function () {\n    var result = document.getElementById('result');\n    \n    var stream = shoe('/invert');\n    var s = es.mapSync(function (msg) {\n        result.appendChild(document.createTextNode(msg));\n        return String(Number(msg)^1);\n    });\n    s.pipe(stream).pipe(s);\n});\n```\n\nServer code that hosts some static files and emits 0s and 1s:\n\n``` js\nvar shoe = require('shoe');\nvar http = require('http');\n\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var iv = setInterval(function () {\n        stream.write(Math.floor(Math.random() * 2));\n    }, 250);\n    \n    stream.on('end', function () {\n        clearInterval(iv);\n    });\n    \n    stream.pipe(process.stdout, { end : false });\n});\nsock.install(server, '/invert');\n```\n\nThe server emits 0s and 1s to the browser, the browser inverts them and sends\nthem back, and the server dumps the binary digits to stdout.\n\nBy default, there's no logspam on stdout to clutter the output, which is a\nfrustrating trend in realtimey websocket libraries that violates the\n[rule of silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450).\n\nJust wait for a client to connect and you'll see:\n\n```\n$ node server.js\n001011010101101000101110010000100\n```\n\nwith dnode\n----------\n\nSince dnode has a simple streaming api it's very simple to plug into shoe.\n\nJust hack up some browser code:\n\n``` js\nvar domready = require('domready');\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\ndomready(function () {\n    var result = document.getElementById('result');\n    var stream = shoe('/dnode');\n    \n    var d = dnode();\n    d.on('remote', function (remote) {\n        remote.transform('beep', function (s) {\n            result.textContent = 'beep => ' + s;\n        });\n    });\n    d.pipe(stream).pipe(d);\n});\n```\nand hack up a server piping shoe streams into dnode:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar http = require('http');\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var d = dnode({\n        transform : function (s, cb) {\n            var res = s.replace(/[aeiou]{2,}/, 'oo').toUpperCase();\n            cb(res);\n        }\n    });\n    d.pipe(stream).pipe(d);\n});\nsock.install(server, '/dnode');\n```\n\nThen open up `localhost:9999` in your browser and you should see:\n\n```\nbeep => BOOP\n```\n\nwith express or connect\n-----------------------\n\nyou must pass the return value of `app.listen(port)`\n\n``` js\nvar shoe = require('shoe');\n\nvar express = require('express')\nvar app = express()\n\nvar sock = shoe(function (stream) { ... });\n\n// *** must pass expcess/connect apps like this:\nsock.install(app.listen(9999), '/dnode');\n```\n\nbrowser methods\n===============\n\n``` js\nvar shoe = require('shoe')\n```\n\nvar stream = shoe(uri, cb)\n--------------------------\n\nReturn a readable/writable stream from the sockjs path `uri`.\n`uri` may be a full uri or just a path.\n\n`shoe` will emit a `'connect'` event when the connection is actually open,\n(just like in [net](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)).\nwrites performed before the `'connect'` event will be buffered. passing in `cb` to \nshoe is a shortcut for `shoe(uri).on('connect', cb)`\n\nserver methods\n==============\n\n``` js\nvar shoe = require('shoe')\n```\n\nAll the methods from the sockjs exports objects are attached onto the `shoe`\nfunction, but the `shoe()` function itself is special.\n\nvar sock = shoe(opts, cb)\n-------------------------\n\nCreate a server with `sockjs.createServer(opts)` except this function also adds\nthe `.install()` function below.\n\nIf `cb` is specified, it fires `cb(stream)` on `'connection'` events.\n\nsock.install(server, opts)\n--------------------------\n\nCall `sock.installHandler()` with the default option of spamming stdout with log\nmessages switched off in place of just emitting `'log'` messages\non the `sock` object instead. This is a much less spammy default that gets out\nof your way.\n\nIf `opts` is a string, use it as the `opts.prefix`.\n\nserver events\n=============\n\nAll the messages that sockjs normally emits will be available on the `sock`\nobject plus the events below:\n\nsock.on('log', function (severity, msg) { ... })\n------------------------------------------------\n\nUsing the default logger with `sock.install()` will cause these `'log'` messages\nto be emitted instead of spamming stdout.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install shoe\n```\n\nlicense\n=======\n\nMIT\n","_id":"shoe@0.0.7","dist":{"shasum":"853c6a1e0d12314d292779888b089725fe538ad9","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.7.tgz","integrity":"sha512-Z0Z++Yr6rR7Iyj9AD8EmKnTzfDK/200Zma6yHGcVoTI2NbBgmqP6epQkxKfLVPDKAQb4h14bf+nynTN1xgphDA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCbFDHCPZsxwT0zUXMitHG9InCdUHtkyprjBuSMk1oq9wIgbUtY1gcf+sB6OgNBHuRaV7cBMRoB8jpeYPYRLY1+lQM="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.9":{"name":"shoe","version":"0.0.9","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"~0.3.3","sockjs-client":"~0.1.3"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"shoe\n====\n\nStreaming sockjs for node and the browser.\n\nThis is a more streaming,\n[more unixy](http://www.faqs.org/docs/artu/ch01s06.html)\ntake on [sockjs](https://github.com/sockjs/sockjs-node).\n\n* works with [browserify](https://github.com/substack/node-browserify)\n([modularity](http://www.faqs.org/docs/artu/ch01s06.html#id2877537))\n* stream all the things\n([composition](http://www.faqs.org/docs/artu/ch01s06.html#id2877684))\n* emits a `'log'` event instead of spamming stdout\n([silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450))\n\n![shoe point javascript](http://substack.net/images/shoe.png)\n\nexample\n=======\n\nstream all the things\n---------------------\n\nBrowser code that takes in a stream of 0s and 1s from the server and inverts\nthem:\n\n``` js\nvar shoe = require('shoe');\nvar es = require('event-stream');\n\nvar result = document.getElementById('result');\n\nvar stream = shoe('/invert');\nvar s = es.mapSync(function (msg) {\n    result.appendChild(document.createTextNode(msg));\n    return String(Number(msg)^1);\n});\ns.pipe(stream).pipe(s);\n```\n\nServer code that hosts some static files and emits 0s and 1s:\n\n``` js\nvar shoe = require('shoe');\nvar http = require('http');\n\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var iv = setInterval(function () {\n        stream.write(Math.floor(Math.random() * 2));\n    }, 250);\n    \n    stream.on('end', function () {\n        clearInterval(iv);\n    });\n    \n    stream.pipe(process.stdout, { end : false });\n});\nsock.install(server, '/invert');\n```\n\nThe server emits 0s and 1s to the browser, the browser inverts them and sends\nthem back, and the server dumps the binary digits to stdout.\n\nBy default, there's no logspam on stdout to clutter the output, which is a\nfrustrating trend in realtimey websocket libraries that violates the\n[rule of silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450).\n\nJust wait for a client to connect and you'll see:\n\n```\n$ node server.js\n001011010101101000101110010000100\n```\n\nwith dnode\n----------\n\nSince dnode has a simple streaming api it's very simple to plug into shoe.\n\nJust hack up some browser code:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar result = document.getElementById('result');\nvar stream = shoe('/dnode');\n\nvar d = dnode();\nd.on('remote', function (remote) {\n    remote.transform('beep', function (s) {\n        result.textContent = 'beep => ' + s;\n    });\n});\nd.pipe(stream).pipe(d);\n```\nand hack up a server piping shoe streams into dnode:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar http = require('http');\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var d = dnode({\n        transform : function (s, cb) {\n            var res = s.replace(/[aeiou]{2,}/, 'oo').toUpperCase();\n            cb(res);\n        }\n    });\n    d.pipe(stream).pipe(d);\n});\nsock.install(server, '/dnode');\n```\n\nThen open up `localhost:9999` in your browser and you should see:\n\n```\nbeep => BOOP\n```\n\nwith express or connect\n-----------------------\n\nyou must pass the return value of `app.listen(port)`\n\n``` js\nvar shoe = require('shoe');\n\nvar express = require('express')\nvar app = express()\n\nvar sock = shoe(function (stream) { ... });\n\n// *** must pass expcess/connect apps like this:\nsock.install(app.listen(9999), '/dnode');\n```\n\nbrowser methods\n===============\n\n``` js\nvar shoe = require('shoe')\n```\n\nvar stream = shoe(uri, cb)\n--------------------------\n\nReturn a readable/writable stream from the sockjs path `uri`.\n`uri` may be a full uri or just a path.\n\n`shoe` will emit a `'connect'` event when the connection is actually open,\n(just like in [net](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)).\nwrites performed before the `'connect'` event will be buffered. passing in `cb` to \nshoe is a shortcut for `shoe(uri).on('connect', cb)`\n\nserver methods\n==============\n\n``` js\nvar shoe = require('shoe')\n```\n\nAll the methods from the sockjs exports objects are attached onto the `shoe`\nfunction, but the `shoe()` function itself is special.\n\nvar sock = shoe(opts, cb)\n-------------------------\n\nCreate a server with `sockjs.createServer(opts)` except this function also adds\nthe `.install()` function below.\n\nIf `cb` is specified, it fires `cb(stream)` on `'connection'` events.\n\nsock.install(server, opts)\n--------------------------\n\nCall `sock.installHandler()` with the default option of spamming stdout with log\nmessages switched off in place of just emitting `'log'` messages\non the `sock` object instead. This is a much less spammy default that gets out\nof your way.\n\nIf `opts` is a string, use it as the `opts.prefix`.\n\nserver events\n=============\n\nAll the messages that sockjs normally emits will be available on the `sock`\nobject plus the events below:\n\nsock.on('log', function (severity, msg) { ... })\n------------------------------------------------\n\nUsing the default logger with `sock.install()` will cause these `'log'` messages\nto be emitted instead of spamming stdout.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install shoe\n```\n\nlicense\n=======\n\nMIT\n","readmeFilename":"README.markdown","_id":"shoe@0.0.9","dist":{"shasum":"7f9bcec5f580a21b5668515e08e0b737549ff929","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.9.tgz","integrity":"sha512-C3srPfDEzndH/Nz7cf7ysIg+F3b9a1MDr+yk5ulIxk0nNgZXe8Vb4yMyHeuCuThHniHtob6SmIE7dJnUtpS4Yg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDBrXJEj8sIjxVMrg+CTiJFkrkocZsHJlTxH9NMoFfjtgIhAJf9T5f84rfNWh477f3VH/1YIzQGP0GztZ9YAHbqapLi"}]},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.10":{"name":"shoe","version":"0.0.10","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"git://github.com/substack/sockjs-node.git#npm","sockjs-client":"git://github.com/substack/sockjs-client.git#browserify-npm"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"shoe\n====\n\nStreaming sockjs for node and the browser.\n\nThis is a more streaming,\n[more unixy](http://www.faqs.org/docs/artu/ch01s06.html)\ntake on [sockjs](https://github.com/sockjs/sockjs-node).\n\n* works with [browserify](https://github.com/substack/node-browserify)\n([modularity](http://www.faqs.org/docs/artu/ch01s06.html#id2877537))\n* stream all the things\n([composition](http://www.faqs.org/docs/artu/ch01s06.html#id2877684))\n* emits a `'log'` event instead of spamming stdout\n([silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450))\n\n![shoe point javascript](http://substack.net/images/shoe.png)\n\nexample\n=======\n\nstream all the things\n---------------------\n\nBrowser code that takes in a stream of 0s and 1s from the server and inverts\nthem:\n\n``` js\nvar shoe = require('shoe');\nvar es = require('event-stream');\n\nvar result = document.getElementById('result');\n\nvar stream = shoe('/invert');\nvar s = es.mapSync(function (msg) {\n    result.appendChild(document.createTextNode(msg));\n    return String(Number(msg)^1);\n});\ns.pipe(stream).pipe(s);\n```\n\nServer code that hosts some static files and emits 0s and 1s:\n\n``` js\nvar shoe = require('shoe');\nvar http = require('http');\n\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var iv = setInterval(function () {\n        stream.write(Math.floor(Math.random() * 2));\n    }, 250);\n    \n    stream.on('end', function () {\n        clearInterval(iv);\n    });\n    \n    stream.pipe(process.stdout, { end : false });\n});\nsock.install(server, '/invert');\n```\n\nThe server emits 0s and 1s to the browser, the browser inverts them and sends\nthem back, and the server dumps the binary digits to stdout.\n\nBy default, there's no logspam on stdout to clutter the output, which is a\nfrustrating trend in realtimey websocket libraries that violates the\n[rule of silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450).\n\nJust wait for a client to connect and you'll see:\n\n```\n$ node server.js\n001011010101101000101110010000100\n```\n\nwith dnode\n----------\n\nSince dnode has a simple streaming api it's very simple to plug into shoe.\n\nJust hack up some browser code:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar result = document.getElementById('result');\nvar stream = shoe('/dnode');\n\nvar d = dnode();\nd.on('remote', function (remote) {\n    remote.transform('beep', function (s) {\n        result.textContent = 'beep => ' + s;\n    });\n});\nd.pipe(stream).pipe(d);\n```\nand hack up a server piping shoe streams into dnode:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar http = require('http');\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var d = dnode({\n        transform : function (s, cb) {\n            var res = s.replace(/[aeiou]{2,}/, 'oo').toUpperCase();\n            cb(res);\n        }\n    });\n    d.pipe(stream).pipe(d);\n});\nsock.install(server, '/dnode');\n```\n\nThen open up `localhost:9999` in your browser and you should see:\n\n```\nbeep => BOOP\n```\n\nwith express or connect\n-----------------------\n\nyou must pass the return value of `app.listen(port)`\n\n``` js\nvar shoe = require('shoe');\n\nvar express = require('express')\nvar app = express()\n\nvar sock = shoe(function (stream) { ... });\n\n// *** must pass expcess/connect apps like this:\nsock.install(app.listen(9999), '/dnode');\n```\n\nbrowser methods\n===============\n\n``` js\nvar shoe = require('shoe')\n```\n\nvar stream = shoe(uri, cb)\n--------------------------\n\nReturn a readable/writable stream from the sockjs path `uri`.\n`uri` may be a full uri or just a path.\n\n`shoe` will emit a `'connect'` event when the connection is actually open,\n(just like in [net](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)).\nwrites performed before the `'connect'` event will be buffered. passing in `cb` to \nshoe is a shortcut for `shoe(uri).on('connect', cb)`\n\nserver methods\n==============\n\n``` js\nvar shoe = require('shoe')\n```\n\nAll the methods from the sockjs exports objects are attached onto the `shoe`\nfunction, but the `shoe()` function itself is special.\n\nvar sock = shoe(opts, cb)\n-------------------------\n\nCreate a server with `sockjs.createServer(opts)` except this function also adds\nthe `.install()` function below.\n\nIf `cb` is specified, it fires `cb(stream)` on `'connection'` events.\n\nsock.install(server, opts)\n--------------------------\n\nCall `sock.installHandler()` with the default option of spamming stdout with log\nmessages switched off in place of just emitting `'log'` messages\non the `sock` object instead. This is a much less spammy default that gets out\nof your way.\n\nIf `opts` is a string, use it as the `opts.prefix`.\n\nserver events\n=============\n\nAll the messages that sockjs normally emits will be available on the `sock`\nobject plus the events below:\n\nsock.on('log', function (severity, msg) { ... })\n------------------------------------------------\n\nUsing the default logger with `sock.install()` will cause these `'log'` messages\nto be emitted instead of spamming stdout.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install shoe\n```\n\nlicense\n=======\n\nMIT\n","readmeFilename":"README.markdown","_id":"shoe@0.0.10","dist":{"shasum":"15bc6f44d975e49a86fbed9bbadab8ab0666f02c","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.10.tgz","integrity":"sha512-2MXpE+2T0wkD00kVZ3Q8m4FOx7HVOqVSuOSfv4thH1lJ9849LIxgWD8Y6+BZ10+1KLybdfLRaCfrUl8R90FgAQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGGVT+M4TF9eVNYM1fENWC4wzdzF7MBge/aHsCfP84fHAiEA6VOFpmbfMOa2PxZACQaVANNWlNNmaw1O+Sh9T+wmrb8="}]},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.11":{"name":"shoe","version":"0.0.11","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"git://github.com/substack/sockjs-node.git#npm","sockjs-client":"git://github.com/substack/sockjs-client.git#browserify-npm"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"shoe\n====\n\nStreaming sockjs for node and the browser.\n\nThis is a more streaming,\n[more unixy](http://www.faqs.org/docs/artu/ch01s06.html)\ntake on [sockjs](https://github.com/sockjs/sockjs-node).\n\n* works with [browserify](https://github.com/substack/node-browserify)\n([modularity](http://www.faqs.org/docs/artu/ch01s06.html#id2877537))\n* stream all the things\n([composition](http://www.faqs.org/docs/artu/ch01s06.html#id2877684))\n* emits a `'log'` event instead of spamming stdout\n([silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450))\n\n![shoe point javascript](http://substack.net/images/shoe.png)\n\nexample\n=======\n\nstream all the things\n---------------------\n\nBrowser code that takes in a stream of 0s and 1s from the server and inverts\nthem:\n\n``` js\nvar shoe = require('shoe');\nvar es = require('event-stream');\n\nvar result = document.getElementById('result');\n\nvar stream = shoe('/invert');\nvar s = es.mapSync(function (msg) {\n    result.appendChild(document.createTextNode(msg));\n    return String(Number(msg)^1);\n});\ns.pipe(stream).pipe(s);\n```\n\nServer code that hosts some static files and emits 0s and 1s:\n\n``` js\nvar shoe = require('shoe');\nvar http = require('http');\n\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var iv = setInterval(function () {\n        stream.write(Math.floor(Math.random() * 2));\n    }, 250);\n    \n    stream.on('end', function () {\n        clearInterval(iv);\n    });\n    \n    stream.pipe(process.stdout, { end : false });\n});\nsock.install(server, '/invert');\n```\n\nThe server emits 0s and 1s to the browser, the browser inverts them and sends\nthem back, and the server dumps the binary digits to stdout.\n\nBy default, there's no logspam on stdout to clutter the output, which is a\nfrustrating trend in realtimey websocket libraries that violates the\n[rule of silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450).\n\nJust wait for a client to connect and you'll see:\n\n```\n$ node server.js\n001011010101101000101110010000100\n```\n\nwith dnode\n----------\n\nSince dnode has a simple streaming api it's very simple to plug into shoe.\n\nJust hack up some browser code:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar result = document.getElementById('result');\nvar stream = shoe('/dnode');\n\nvar d = dnode();\nd.on('remote', function (remote) {\n    remote.transform('beep', function (s) {\n        result.textContent = 'beep => ' + s;\n    });\n});\nd.pipe(stream).pipe(d);\n```\nand hack up a server piping shoe streams into dnode:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar http = require('http');\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var d = dnode({\n        transform : function (s, cb) {\n            var res = s.replace(/[aeiou]{2,}/, 'oo').toUpperCase();\n            cb(res);\n        }\n    });\n    d.pipe(stream).pipe(d);\n});\nsock.install(server, '/dnode');\n```\n\nThen open up `localhost:9999` in your browser and you should see:\n\n```\nbeep => BOOP\n```\n\nwith express or connect\n-----------------------\n\nyou must pass the return value of `app.listen(port)`\n\n``` js\nvar shoe = require('shoe');\n\nvar express = require('express')\nvar app = express()\n\nvar sock = shoe(function (stream) { ... });\n\n// *** must pass expcess/connect apps like this:\nsock.install(app.listen(9999), '/dnode');\n```\n\nwith reconnect\n--------------\n\nyou can use [reconnect](https://github.com/dominictarr/reconnect) just in case your sock ends or gets disconnected.\n\n``` js\nvar shoe = require('shoe');\nvar reconnect = require('reconnect');\nvar es = require('event-stream');\nvar result = document.getElementById('result');\n\nvar r = reconnect(function (stream) {\n\n  var s = es.mapSync(function (msg) {\n      result.appendChild(document.createTextNode(msg));\n      return String(Number(msg)^1);\n  });\n  s.pipe(stream).pipe(s);\n\n}).connect('/invert')\n\n```\n\nbrowser methods\n===============\n\n``` js\nvar shoe = require('shoe')\n```\n\nvar stream = shoe(uri, cb)\n--------------------------\n\nReturn a readable/writable stream from the sockjs path `uri`.\n`uri` may be a full uri or just a path.\n\n`shoe` will emit a `'connect'` event when the connection is actually open,\n(just like in [net](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)).\nwrites performed before the `'connect'` event will be buffered. passing in `cb` to \nshoe is a shortcut for `shoe(uri).on('connect', cb)`\n\nserver methods\n==============\n\n``` js\nvar shoe = require('shoe')\n```\n\nAll the methods from the sockjs exports objects are attached onto the `shoe`\nfunction, but the `shoe()` function itself is special.\n\nvar sock = shoe(opts, cb)\n-------------------------\n\nCreate a server with `sockjs.createServer(opts)` except this function also adds\nthe `.install()` function below.\n\nIf `cb` is specified, it fires `cb(stream)` on `'connection'` events.\n\nsock.install(server, opts)\n--------------------------\n\nCall `sock.installHandler()` with the default option of spamming stdout with log\nmessages switched off in place of just emitting `'log'` messages\non the `sock` object instead. This is a much less spammy default that gets out\nof your way.\n\nIf `opts` is a string, use it as the `opts.prefix`.\n\nserver events\n=============\n\nAll the messages that sockjs normally emits will be available on the `sock`\nobject plus the events below:\n\nsock.on('log', function (severity, msg) { ... })\n------------------------------------------------\n\nUsing the default logger with `sock.install()` will cause these `'log'` messages\nto be emitted instead of spamming stdout.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install shoe\n```\n\nlicense\n=======\n\nMIT\n","readmeFilename":"README.markdown","_id":"shoe@0.0.11","dist":{"shasum":"f1c1552b1e1a469b805834e2062e78ca3c958364","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.11.tgz","integrity":"sha512-n5wO+4YYbnTFlWfrq2T4eo91sesmNq68Q4Ayv4vCeKf7aC5GfILRrFDfvK29z3tu9of7M/VIG2SSbbPK8i2Gdw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQClb99o6Up1sTnT/KZSFIPJF3wVkmTzlBv1DooE1a0oXAIhALHH47pTpEStcso69+fZfyN+eoGZEq8gZ+yeCJA0KKlO"}]},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.12":{"name":"shoe","version":"0.0.12","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"0.3.7"},"devDependencies":{"through":"~2.3.4","tape":"~1.0.4","testling":"~1.4.1"},"scripts":{"test":"testling ."},"testling":{"files":"test/browser.js","server":"test/server.js","browsers":["ie/8..latest","chrome/latest","firefox/latest","safari/latest","opera/latest","iphone/latest","ipad/latest","android/latest"]},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"shoe\n====\n\nStreaming sockjs for node and the browser.\n\nThis is a more streaming,\n[more unixy](http://www.faqs.org/docs/artu/ch01s06.html)\ntake on [sockjs](https://github.com/sockjs/sockjs-node).\n\n* works with [browserify](https://github.com/substack/node-browserify)\n([modularity](http://www.faqs.org/docs/artu/ch01s06.html#id2877537))\n* stream all the things\n([composition](http://www.faqs.org/docs/artu/ch01s06.html#id2877684))\n* emits a `'log'` event instead of spamming stdout\n([silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450))\n\n![shoe point javascript](http://substack.net/images/shoe.png)\n\nexample\n=======\n\nstream all the things\n---------------------\n\nBrowser code that takes in a stream of 0s and 1s from the server and inverts\nthem:\n\n``` js\nvar shoe = require('shoe');\nvar through = require('through');\n\nvar result = document.getElementById('result');\n\nvar stream = shoe('/invert');\nstream.pipe(through(function (msg) {\n    result.appendChild(document.createTextNode(msg));\n    this.queue(String(Number(msg)^1));\n})).pipe(stream);\n```\n\nServer code that hosts some static files and emits 0s and 1s:\n\n``` js\nvar shoe = require('shoe');\nvar http = require('http');\n\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var iv = setInterval(function () {\n        stream.write(Math.floor(Math.random() * 2));\n    }, 250);\n    \n    stream.on('end', function () {\n        clearInterval(iv);\n    });\n    \n    stream.pipe(process.stdout, { end : false });\n});\nsock.install(server, '/invert');\n```\n\nThe server emits 0s and 1s to the browser, the browser inverts them and sends\nthem back, and the server dumps the binary digits to stdout.\n\nBy default, there's no logspam on stdout to clutter the output, which is a\nfrustrating trend in realtimey websocket libraries that violates the\n[rule of silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450).\n\nJust wait for a client to connect and you'll see:\n\n```\n$ node server.js\n001011010101101000101110010000100\n```\n\nwith dnode\n----------\n\nSince dnode has a simple streaming api it's very simple to plug into shoe.\n\nJust hack up some browser code:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar result = document.getElementById('result');\nvar stream = shoe('/dnode');\n\nvar d = dnode();\nd.on('remote', function (remote) {\n    remote.transform('beep', function (s) {\n        result.textContent = 'beep => ' + s;\n    });\n});\nd.pipe(stream).pipe(d);\n```\nand hack up a server piping shoe streams into dnode:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar http = require('http');\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var d = dnode({\n        transform : function (s, cb) {\n            var res = s.replace(/[aeiou]{2,}/, 'oo').toUpperCase();\n            cb(res);\n        }\n    });\n    d.pipe(stream).pipe(d);\n});\nsock.install(server, '/dnode');\n```\n\nThen open up `localhost:9999` in your browser and you should see:\n\n```\nbeep => BOOP\n```\n\nwith express or connect\n-----------------------\n\nyou must pass the return value of `app.listen(port)`\n\n``` js\nvar shoe = require('shoe');\n\nvar express = require('express')\nvar app = express()\n\nvar sock = shoe(function (stream) { ... });\n\n// *** must pass expcess/connect apps like this:\nsock.install(app.listen(9999), '/dnode');\n```\n\nwith reconnect\n--------------\n\nyou can use [reconnect](https://github.com/dominictarr/reconnect) just in case your sock ends or gets disconnected.\n\n``` js\nvar shoe = require('shoe');\nvar reconnect = require('reconnect');\nvar es = require('event-stream');\nvar result = document.getElementById('result');\n\nvar r = reconnect(function (stream) {\n\n  var s = es.mapSync(function (msg) {\n      result.appendChild(document.createTextNode(msg));\n      return String(Number(msg)^1);\n  });\n  s.pipe(stream).pipe(s);\n\n}).connect('/invert')\n\n```\n\nbrowser methods\n===============\n\n``` js\nvar shoe = require('shoe')\n```\n\nvar stream = shoe(uri, cb)\n--------------------------\n\nReturn a readable/writable stream from the sockjs path `uri`.\n`uri` may be a full uri or just a path.\n\n`shoe` will emit a `'connect'` event when the connection is actually open,\n(just like in [net](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)).\nwrites performed before the `'connect'` event will be buffered. passing in `cb` to \nshoe is a shortcut for `shoe(uri).on('connect', cb)`\n\nserver methods\n==============\n\n``` js\nvar shoe = require('shoe')\n```\n\nAll the methods from the sockjs exports objects are attached onto the `shoe`\nfunction, but the `shoe()` function itself is special.\n\nvar sock = shoe(opts, cb)\n-------------------------\n\nCreate a server with `sockjs.createServer(opts)` except this function also adds\nthe `.install()` function below.\n\nIf `cb` is specified, it fires `cb(stream)` on `'connection'` events.\n\nsock.install(server, opts)\n--------------------------\n\nCall `sock.installHandler()` with the default option of spamming stdout with log\nmessages switched off in place of just emitting `'log'` messages\non the `sock` object instead. This is a much less spammy default that gets out\nof your way.\n\nIf `opts` is a string, use it as the `opts.prefix`.\n\nserver events\n=============\n\nAll the messages that sockjs normally emits will be available on the `sock`\nobject plus the events below:\n\nsock.on('log', function (severity, msg) { ... })\n------------------------------------------------\n\nUsing the default logger with `sock.install()` will cause these `'log'` messages\nto be emitted instead of spamming stdout.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install shoe\n```\n\nlicense\n=======\n\nMIT\n","readmeFilename":"readme.markdown","bugs":{"url":"https://github.com/substack/shoe/issues"},"bundleDependencies":["sockjs-client"],"_id":"shoe@0.0.12","dist":{"shasum":"342da7c04013a1757b5d50dc950d59431c231084","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.12.tgz","integrity":"sha512-H1JXRVMdnIsHx937mNZX7KdCycRIyNah9/FLRHaGa4aAi2VIgzYbE1vs2GVbAci7KIiijvdrRRM6W4qR5qcuBA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQClFfSFs/NYzn8pHxNgYDYkp2GWq+EdB2sNQOuSniZGqQIhAIMEWEAqKneWN11SzwGWWzDgjlRef1Q+AQPeMhx49We+"}]},"_from":".","_npmVersion":"1.3.0","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.13":{"name":"shoe","version":"0.0.13","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"0.3.7"},"devDependencies":{"through":"~2.3.4","tape":"~1.0.4","testling":"~1.4.1"},"scripts":{"test":"testling ."},"testling":{"files":"test/browser.js","server":"test/server.js","browsers":["ie/8..latest","chrome/latest","firefox/latest","safari/latest","opera/latest","iphone/latest","ipad/latest","android/latest"]},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"shoe\n====\n\nStreaming sockjs for node and the browser.\n\nThis is a more streaming,\n[more unixy](http://www.faqs.org/docs/artu/ch01s06.html)\ntake on [sockjs](https://github.com/sockjs/sockjs-node).\n\n* works with [browserify](https://github.com/substack/node-browserify)\n([modularity](http://www.faqs.org/docs/artu/ch01s06.html#id2877537))\n* stream all the things\n([composition](http://www.faqs.org/docs/artu/ch01s06.html#id2877684))\n* emits a `'log'` event instead of spamming stdout\n([silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450))\n\n![shoe point javascript](http://substack.net/images/shoe.png)\n\nexample\n=======\n\nstream all the things\n---------------------\n\nBrowser code that takes in a stream of 0s and 1s from the server and inverts\nthem:\n\n``` js\nvar shoe = require('shoe');\nvar through = require('through');\n\nvar result = document.getElementById('result');\n\nvar stream = shoe('/invert');\nstream.pipe(through(function (msg) {\n    result.appendChild(document.createTextNode(msg));\n    this.queue(String(Number(msg)^1));\n})).pipe(stream);\n```\n\nServer code that hosts some static files and emits 0s and 1s:\n\n``` js\nvar shoe = require('shoe');\nvar http = require('http');\n\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var iv = setInterval(function () {\n        stream.write(Math.floor(Math.random() * 2));\n    }, 250);\n    \n    stream.on('end', function () {\n        clearInterval(iv);\n    });\n    \n    stream.pipe(process.stdout, { end : false });\n});\nsock.install(server, '/invert');\n```\n\nThe server emits 0s and 1s to the browser, the browser inverts them and sends\nthem back, and the server dumps the binary digits to stdout.\n\nBy default, there's no logspam on stdout to clutter the output, which is a\nfrustrating trend in realtimey websocket libraries that violates the\n[rule of silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450).\n\nJust wait for a client to connect and you'll see:\n\n```\n$ node server.js\n001011010101101000101110010000100\n```\n\nwith dnode\n----------\n\nSince dnode has a simple streaming api it's very simple to plug into shoe.\n\nJust hack up some browser code:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar result = document.getElementById('result');\nvar stream = shoe('/dnode');\n\nvar d = dnode();\nd.on('remote', function (remote) {\n    remote.transform('beep', function (s) {\n        result.textContent = 'beep => ' + s;\n    });\n});\nd.pipe(stream).pipe(d);\n```\nand hack up a server piping shoe streams into dnode:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar http = require('http');\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var d = dnode({\n        transform : function (s, cb) {\n            var res = s.replace(/[aeiou]{2,}/, 'oo').toUpperCase();\n            cb(res);\n        }\n    });\n    d.pipe(stream).pipe(d);\n});\nsock.install(server, '/dnode');\n```\n\nThen open up `localhost:9999` in your browser and you should see:\n\n```\nbeep => BOOP\n```\n\nwith express or connect\n-----------------------\n\nyou must pass the return value of `app.listen(port)`\n\n``` js\nvar shoe = require('shoe');\n\nvar express = require('express')\nvar app = express()\n\nvar sock = shoe(function (stream) { ... });\n\n// *** must pass expcess/connect apps like this:\nsock.install(app.listen(9999), '/dnode');\n```\n\nwith reconnect\n--------------\n\nyou can use [reconnect](https://github.com/dominictarr/reconnect) just in case your sock ends or gets disconnected.\n\n``` js\nvar shoe = require('shoe');\nvar reconnect = require('reconnect');\nvar es = require('event-stream');\nvar result = document.getElementById('result');\n\nvar r = reconnect(function (stream) {\n\n  var s = es.mapSync(function (msg) {\n      result.appendChild(document.createTextNode(msg));\n      return String(Number(msg)^1);\n  });\n  s.pipe(stream).pipe(s);\n\n}).connect('/invert')\n\n```\n\nbrowser methods\n===============\n\n``` js\nvar shoe = require('shoe')\n```\n\nvar stream = shoe(uri, cb)\n--------------------------\n\nReturn a readable/writable stream from the sockjs path `uri`.\n`uri` may be a full uri or just a path.\n\n`shoe` will emit a `'connect'` event when the connection is actually open,\n(just like in [net](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)).\nwrites performed before the `'connect'` event will be buffered. passing in `cb` to \nshoe is a shortcut for `shoe(uri).on('connect', cb)`\n\nserver methods\n==============\n\n``` js\nvar shoe = require('shoe')\n```\n\nAll the methods from the sockjs exports objects are attached onto the `shoe`\nfunction, but the `shoe()` function itself is special.\n\nvar sock = shoe(opts, cb)\n-------------------------\n\nCreate a server with `sockjs.createServer(opts)` except this function also adds\nthe `.install()` function below.\n\nIf `cb` is specified, it fires `cb(stream)` on `'connection'` events.\n\nsock.install(server, opts)\n--------------------------\n\nCall `sock.installHandler()` with the default option of spamming stdout with log\nmessages switched off in place of just emitting `'log'` messages\non the `sock` object instead. This is a much less spammy default that gets out\nof your way.\n\nIf `opts` is a string, use it as the `opts.prefix`.\n\nserver events\n=============\n\nAll the messages that sockjs normally emits will be available on the `sock`\nobject plus the events below:\n\nsock.on('log', function (severity, msg) { ... })\n------------------------------------------------\n\nUsing the default logger with `sock.install()` will cause these `'log'` messages\nto be emitted instead of spamming stdout.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install shoe\n```\n\nlicense\n=======\n\nMIT\n","readmeFilename":"readme.markdown","bugs":{"url":"https://github.com/substack/shoe/issues"},"bundleDependencies":["sockjs-client"],"_id":"shoe@0.0.13","dist":{"shasum":"6b34788e74395194ef107fbf65392f00803500c5","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.13.tgz","integrity":"sha512-cqA28zMVPYaaYxmljmvClpSnqo1nExVFq4StmuitZ1rEF8+2MbN6gon5x6394akMKAxS+x20Gdtrp1HMn/UPvQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC3XNOHSaAewxRHFqDVIx1/0uAvtMA7kM/Q5oXXyEudDwIhAJUYdW9PSU3eI2h4uo7LINwyrEhIlrTEh8V5vWSLO9lx"}]},"_from":".","_npmVersion":"1.3.7","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.14":{"name":"shoe","version":"0.0.14","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"0.3.7"},"devDependencies":{"through":"~2.3.4","tape":"~1.0.4","testling":"~1.4.1"},"scripts":{"test":"testling ."},"testling":{"files":"test/browser.js","server":"test/server.js","browsers":["ie/8..latest","chrome/latest","firefox/latest","safari/latest","opera/latest","iphone/latest","ipad/latest","android/latest"]},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"shoe\n====\n\nStreaming sockjs for node and the browser.\n\nThis is a more streaming,\n[more unixy](http://www.faqs.org/docs/artu/ch01s06.html)\ntake on [sockjs](https://github.com/sockjs/sockjs-node).\n\n* works with [browserify](https://github.com/substack/node-browserify)\n([modularity](http://www.faqs.org/docs/artu/ch01s06.html#id2877537))\n* stream all the things\n([composition](http://www.faqs.org/docs/artu/ch01s06.html#id2877684))\n* emits a `'log'` event instead of spamming stdout\n([silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450))\n\n![shoe point javascript](http://substack.net/images/shoe.png)\n\nexample\n=======\n\nstream all the things\n---------------------\n\nBrowser code that takes in a stream of 0s and 1s from the server and inverts\nthem:\n\n``` js\nvar shoe = require('shoe');\nvar through = require('through');\n\nvar result = document.getElementById('result');\n\nvar stream = shoe('/invert');\nstream.pipe(through(function (msg) {\n    result.appendChild(document.createTextNode(msg));\n    this.queue(String(Number(msg)^1));\n})).pipe(stream);\n```\n\nServer code that hosts some static files and emits 0s and 1s:\n\n``` js\nvar shoe = require('shoe');\nvar http = require('http');\n\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var iv = setInterval(function () {\n        stream.write(Math.floor(Math.random() * 2));\n    }, 250);\n    \n    stream.on('end', function () {\n        clearInterval(iv);\n    });\n    \n    stream.pipe(process.stdout, { end : false });\n});\nsock.install(server, '/invert');\n```\n\nThe server emits 0s and 1s to the browser, the browser inverts them and sends\nthem back, and the server dumps the binary digits to stdout.\n\nBy default, there's no logspam on stdout to clutter the output, which is a\nfrustrating trend in realtimey websocket libraries that violates the\n[rule of silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450).\n\nJust wait for a client to connect and you'll see:\n\n```\n$ node server.js\n001011010101101000101110010000100\n```\n\nwith dnode\n----------\n\nSince dnode has a simple streaming api it's very simple to plug into shoe.\n\nJust hack up some browser code:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar result = document.getElementById('result');\nvar stream = shoe('/dnode');\n\nvar d = dnode();\nd.on('remote', function (remote) {\n    remote.transform('beep', function (s) {\n        result.textContent = 'beep => ' + s;\n    });\n});\nd.pipe(stream).pipe(d);\n```\nand hack up a server piping shoe streams into dnode:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar http = require('http');\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var d = dnode({\n        transform : function (s, cb) {\n            var res = s.replace(/[aeiou]{2,}/, 'oo').toUpperCase();\n            cb(res);\n        }\n    });\n    d.pipe(stream).pipe(d);\n});\nsock.install(server, '/dnode');\n```\n\nThen open up `localhost:9999` in your browser and you should see:\n\n```\nbeep => BOOP\n```\n\nwith express or connect\n-----------------------\n\nyou must pass the return value of `app.listen(port)`\n\n``` js\nvar shoe = require('shoe');\n\nvar express = require('express')\nvar app = express()\n\nvar sock = shoe(function (stream) { ... });\n\n// *** must pass expcess/connect apps like this:\nsock.install(app.listen(9999), '/dnode');\n```\n\nwith reconnect\n--------------\n\nyou can use [reconnect](https://github.com/dominictarr/reconnect) just in case your sock ends or gets disconnected.\n\n``` js\nvar shoe = require('shoe');\nvar reconnect = require('reconnect');\nvar es = require('event-stream');\nvar result = document.getElementById('result');\n\nvar r = reconnect(function (stream) {\n\n  var s = es.mapSync(function (msg) {\n      result.appendChild(document.createTextNode(msg));\n      return String(Number(msg)^1);\n  });\n  s.pipe(stream).pipe(s);\n\n}).connect('/invert')\n\n```\n\nbrowser methods\n===============\n\n``` js\nvar shoe = require('shoe')\n```\n\nvar stream = shoe(uri, cb)\n--------------------------\n\nReturn a readable/writable stream from the sockjs path `uri`.\n`uri` may be a full uri or just a path.\n\n`shoe` will emit a `'connect'` event when the connection is actually open,\n(just like in [net](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)).\nwrites performed before the `'connect'` event will be buffered. passing in `cb` to \nshoe is a shortcut for `shoe(uri).on('connect', cb)`\n\nserver methods\n==============\n\n``` js\nvar shoe = require('shoe')\n```\n\nAll the methods from the sockjs exports objects are attached onto the `shoe`\nfunction, but the `shoe()` function itself is special.\n\nvar sock = shoe(opts, cb)\n-------------------------\n\nCreate a server with `sockjs.createServer(opts)` except this function also adds\nthe `.install()` function below.\n\nIf `cb` is specified, it fires `cb(stream)` on `'connection'` events.\n\nsock.install(server, opts)\n--------------------------\n\nCall `sock.installHandler()` with the default option of spamming stdout with log\nmessages switched off in place of just emitting `'log'` messages\non the `sock` object instead. This is a much less spammy default that gets out\nof your way.\n\nIf `opts` is a string, use it as the `opts.prefix`.\n\nserver events\n=============\n\nAll the messages that sockjs normally emits will be available on the `sock`\nobject plus the events below:\n\nsock.on('log', function (severity, msg) { ... })\n------------------------------------------------\n\nUsing the default logger with `sock.install()` will cause these `'log'` messages\nto be emitted instead of spamming stdout.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install shoe\n```\n\nlicense\n=======\n\nMIT\n","readmeFilename":"readme.markdown","bugs":{"url":"https://github.com/substack/shoe/issues"},"bundleDependencies":["sockjs-client"],"_id":"shoe@0.0.14","dist":{"shasum":"dcd142c09b44c6ccf4aa4f13d5e36ab13afe9b6e","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.14.tgz","integrity":"sha512-G7J8kgHOZToo5c54uzba6I2PpsKDDR8AqLEBlId+1xG0tAlZqv02bykEVvsM6kf9C+3J4iUQF/b6I1ClVoXpHQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIB1c1J7CRBNd5M60wCP2zadYaHIWq74H1/hc07FgXn7gAiEA8IUcxpVwdxv8eeTmhZIUH0MNF7ZxsP+OPJun372WuII="}]},"_from":".","_npmVersion":"1.3.7","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.15":{"name":"shoe","version":"0.0.15","description":"streaming sockjs for node and the browser","main":"index.js","browserify":"browser.js","directories":{"example":"example"},"dependencies":{"sockjs":"0.3.7"},"devDependencies":{"through":"~2.3.4","tape":"~1.0.4","testling":"~1.4.1"},"scripts":{"test":"testling ."},"testling":{"files":"test/browser.js","server":"test/server.js","browsers":["ie/8..latest","chrome/latest","firefox/latest","safari/latest","opera/latest","iphone/latest","ipad/latest","android/latest"]},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"homepage":"https://github.com/substack/shoe","keywords":["websocket","stream","sock","browserify"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","engine":{"node":">=0.6"},"readme":"shoe\n====\n\nStreaming sockjs for node and the browser.\n\nThis is a more streaming,\n[more unixy](http://www.faqs.org/docs/artu/ch01s06.html)\ntake on [sockjs](https://github.com/sockjs/sockjs-node).\n\n* works with [browserify](https://github.com/substack/node-browserify)\n([modularity](http://www.faqs.org/docs/artu/ch01s06.html#id2877537))\n* stream all the things\n([composition](http://www.faqs.org/docs/artu/ch01s06.html#id2877684))\n* emits a `'log'` event instead of spamming stdout\n([silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450))\n\n![shoe point javascript](http://substack.net/images/shoe.png)\n\nexample\n=======\n\nstream all the things\n---------------------\n\nBrowser code that takes in a stream of 0s and 1s from the server and inverts\nthem:\n\n``` js\nvar shoe = require('shoe');\nvar through = require('through');\n\nvar result = document.getElementById('result');\n\nvar stream = shoe('/invert');\nstream.pipe(through(function (msg) {\n    result.appendChild(document.createTextNode(msg));\n    this.queue(String(Number(msg)^1));\n})).pipe(stream);\n```\n\nServer code that hosts some static files and emits 0s and 1s:\n\n``` js\nvar shoe = require('shoe');\nvar http = require('http');\n\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var iv = setInterval(function () {\n        stream.write(Math.floor(Math.random() * 2));\n    }, 250);\n    \n    stream.on('end', function () {\n        clearInterval(iv);\n    });\n    \n    stream.pipe(process.stdout, { end : false });\n});\nsock.install(server, '/invert');\n```\n\nThe server emits 0s and 1s to the browser, the browser inverts them and sends\nthem back, and the server dumps the binary digits to stdout.\n\nBy default, there's no logspam on stdout to clutter the output, which is a\nfrustrating trend in realtimey websocket libraries that violates the\n[rule of silence](http://www.faqs.org/docs/artu/ch01s06.html#id2878450).\n\nJust wait for a client to connect and you'll see:\n\n```\n$ node server.js\n001011010101101000101110010000100\n```\n\nwith dnode\n----------\n\nSince dnode has a simple streaming api it's very simple to plug into shoe.\n\nJust hack up some browser code:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar result = document.getElementById('result');\nvar stream = shoe('/dnode');\n\nvar d = dnode();\nd.on('remote', function (remote) {\n    remote.transform('beep', function (s) {\n        result.textContent = 'beep => ' + s;\n    });\n});\nd.pipe(stream).pipe(d);\n```\nand hack up a server piping shoe streams into dnode:\n\n``` js\nvar shoe = require('shoe');\nvar dnode = require('dnode');\n\nvar http = require('http');\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar server = http.createServer(ecstatic);\nserver.listen(9999);\n\nvar sock = shoe(function (stream) {\n    var d = dnode({\n        transform : function (s, cb) {\n            var res = s.replace(/[aeiou]{2,}/, 'oo').toUpperCase();\n            cb(res);\n        }\n    });\n    d.pipe(stream).pipe(d);\n});\nsock.install(server, '/dnode');\n```\n\nThen open up `localhost:9999` in your browser and you should see:\n\n```\nbeep => BOOP\n```\n\nwith express or connect\n-----------------------\n\nyou must pass the return value of `app.listen(port)`\n\n``` js\nvar shoe = require('shoe');\n\nvar express = require('express')\nvar app = express()\n\nvar sock = shoe(function (stream) { ... });\n\n// *** must pass expcess/connect apps like this:\nsock.install(app.listen(9999), '/dnode');\n```\n\nwith reconnect\n--------------\n\nyou can use [reconnect](https://github.com/dominictarr/reconnect) just in case your sock ends or gets disconnected.\n\n``` js\nvar shoe = require('shoe');\nvar reconnect = require('reconnect');\nvar es = require('event-stream');\nvar result = document.getElementById('result');\n\nvar r = reconnect(function (stream) {\n\n  var s = es.mapSync(function (msg) {\n      result.appendChild(document.createTextNode(msg));\n      return String(Number(msg)^1);\n  });\n  s.pipe(stream).pipe(s);\n\n}).connect('/invert')\n\n```\n\nbrowser methods\n===============\n\n``` js\nvar shoe = require('shoe')\n```\n\nvar stream = shoe(uri, cb)\n--------------------------\n\nReturn a readable/writable stream from the sockjs path `uri`.\n`uri` may be a full uri or just a path.\n\n`shoe` will emit a `'connect'` event when the connection is actually open,\n(just like in [net](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)).\nwrites performed before the `'connect'` event will be buffered. passing in `cb` to \nshoe is a shortcut for `shoe(uri).on('connect', cb)`\n\nserver methods\n==============\n\n``` js\nvar shoe = require('shoe')\n```\n\nAll the methods from the sockjs exports objects are attached onto the `shoe`\nfunction, but the `shoe()` function itself is special.\n\nvar sock = shoe(opts, cb)\n-------------------------\n\nCreate a server with `sockjs.createServer(opts)` except this function also adds\nthe `.install()` function below.\n\nIf `cb` is specified, it fires `cb(stream)` on `'connection'` events.\n\nsock.install(server, opts)\n--------------------------\n\nCall `sock.installHandler()` with the default option of spamming stdout with log\nmessages switched off in place of just emitting `'log'` messages\non the `sock` object instead. This is a much less spammy default that gets out\nof your way.\n\nIf `opts` is a string, use it as the `opts.prefix`.\n\nserver events\n=============\n\nAll the messages that sockjs normally emits will be available on the `sock`\nobject plus the events below:\n\nsock.on('log', function (severity, msg) { ... })\n------------------------------------------------\n\nUsing the default logger with `sock.install()` will cause these `'log'` messages\nto be emitted instead of spamming stdout.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install shoe\n```\n\nlicense\n=======\n\nMIT\n","readmeFilename":"readme.markdown","bugs":{"url":"https://github.com/substack/shoe/issues"},"bundleDependencies":["sockjs-client"],"_id":"shoe@0.0.15","dist":{"shasum":"baed8f1a7f08f530b66f0914287fcaa65b12443a","tarball":"https://registry.npmjs.org/shoe/-/shoe-0.0.15.tgz","integrity":"sha512-XM5aTvK9kzdYYYZ0sr4pqteQ1jeHucXgSa6ueQE7CrDZTa+1bXGbQWT5EPyIw4LYhZ0fur43cGZgnifJJPfSOQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCID+2SV8BMlxu2uligRBbu9CEyMDs02uLerWfbh8s+/LXAiAipGcOG6ApVt8qR8fcIK+3xpu/iFG7+BgMKOEZIiME5A=="}]},"_from":".","_npmVersion":"1.3.7","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]}},"readme":"","maintainers":[{"email":"nopersonsmodules@gmail.com","name":"nopersonsmodules"}],"time":{"modified":"2022-11-08T10:40:54.319Z","created":"2012-06-23T02:46:07.696Z","0.0.0":"2012-06-23T02:46:09.299Z","0.0.1":"2012-06-25T07:27:07.239Z","0.0.2":"2012-06-25T10:51:52.469Z","0.0.3":"2012-07-06T17:12:13.829Z","0.0.4":"2012-08-07T01:35:26.867Z","0.0.5":"2012-08-20T20:57:00.661Z","0.0.6":"2012-09-07T05:56:45.594Z","0.0.7":"2012-09-09T10:22:25.158Z","0.0.9":"2013-03-11T09:04:32.569Z","0.0.10":"2013-03-16T18:12:35.755Z","0.0.11":"2013-05-24T21:23:18.571Z","0.0.12":"2013-07-26T23:06:32.494Z","0.0.13":"2013-08-07T23:22:57.487Z","0.0.14":"2013-08-26T07:18:31.945Z","0.0.15":"2013-08-29T00:15:16.199Z"},"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"repository":{"type":"git","url":"git://github.com/substack/shoe.git"},"users":{"chrisdickinson":true,"joakin":true,"knownasilya":true,"kael":true,"dexteryy":true,"akiva":true,"pengzhisun":true,"wenbing":true,"qbylucky":true,"j.su":true,"quocnguyen":true}}