{"_id":"invert-stream","_rev":"8-aa86e47fb4d5367d92253b766b59fa78","name":"invert-stream","description":"Create a pair of streams (A, B) such that `A.write(X) -> B.emit('data', X)` and `B.write(X) -> A.emit('data', X)`","dist-tags":{"latest":"0.0.1"},"versions":{"0.0.0":{"name":"invert-stream","version":"0.0.0","homepage":"https://github.com/dominictarr/invert-stream","repository":{"type":"git","url":"git://github.com/dominictarr/invert-stream.git"},"dependencies":{"macgyver":"~1.8.0"},"devDependencies":{"tap":"0.3.0"},"scripts":{"test":"tap test"},"author":{"name":"'Dominic Tarr'","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"license":"MIT","readme":"# invert-stream\n\nCreate a pair of streams (A, B) such that `A.write(X) -> B.emit('data', X)`\nand `B.write(X) -> A.emit('data', X)`\n\n``` js\n\nvar invert = require('invert-stream')\n\nvar inverted = invert()\n\nin_steam.pipe(inverted.other).pipe(out_stream)\n\ninverted.write(data_for_outstream)\ninverted.on('data', data_from_in_stream)\n\n## why ?\n\nthis is useful for a couple of things.\n\n  * testing streams based stuff\n  * making flexible duplex stream apis\n\nan `invert-stream` pair is like a tcp connection, \nbut in-process and synchronous. It's way easier to test\nedge cases related to event order if you stuff works sync.\n\nAlso, it's useful making duplex streams, or multiple streams into one.\n\n### Example\n\n```js\n\n  var spawn = require('child_process').spawn\n  var invert = require('invert-stream')\n\n  var ch = spawn(cmd, args)\n  var inverted = invert()\n\n  ch.stdout.pipe(inverted.other).pipe(ch.sdin)\n\n  //now, we have just ONE stream: inverted\n\n  //write to che ch's stdin\n  inverted.write(data)\n\n  //read from ch's stdout\n  inverted.on('data', ...) \n\n```\n\n## License\n\nMIT\n","_id":"invert-stream@0.0.0","description":"Create a pair of streams (A, B) such that `A.write(X) -> B.emit('data', X)` and `B.write(X) -> A.emit('data', X)`","dist":{"shasum":"9048748cb805b12e821c912f954ac8ac28f83d18","tarball":"https://registry.npmjs.org/invert-stream/-/invert-stream-0.0.0.tgz","integrity":"sha512-8o2NDQ3LsYz4oRxE3OUA4if58DsodoIbssgS0On+4Kis6OVSiGfwonGLAGQ2JJHzWfINHWP+1qejxpG7XTnoyQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHwPJPkDX7BvaxvuAECv2WJ0Ou9i+uzHWFtQK+UVreT7AiAn7Bs6MNE8Je+bZMvK5kuWk0gK/4REsYJE0DkWIxttYA=="}]},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.0.1":{"name":"invert-stream","version":"0.0.1","homepage":"https://github.com/dominictarr/invert-stream","repository":{"type":"git","url":"git://github.com/dominictarr/invert-stream.git"},"dependencies":{},"devDependencies":{"macgyver":"~1.8.0","tap":"0.3.0"},"scripts":{"test":"tap test"},"author":{"name":"'Dominic Tarr'","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"license":"MIT","readme":"# invert-stream\n\nCreate a pair of streams (A, B) such that `A.write(X) -> B.emit('data', X)`\nand `B.write(X) -> A.emit('data', X)`\n\n``` js\n\nvar invert = require('invert-stream')\n\nvar inverted = invert()\n\nin_steam.pipe(inverted.other).pipe(out_stream)\n\ninverted.write(data_for_outstream)\ninverted.on('data', data_from_in_stream)\n\n## why ?\n\nthis is useful for a couple of things.\n\n  * testing streams based stuff\n  * making flexible duplex stream apis\n\nan `invert-stream` pair is like a tcp connection, \nbut in-process and synchronous. It's way easier to test\nedge cases related to event order if you stuff works sync.\n\nAlso, it's useful making duplex streams, or multiple streams into one.\n\n### Example\n\n```js\n\n  var spawn = require('child_process').spawn\n  var invert = require('invert-stream')\n\n  var ch = spawn(cmd, args)\n  var inverted = invert()\n\n  ch.stdout.pipe(inverted.other).pipe(ch.sdin)\n\n  //now, we have just ONE stream: inverted\n\n  //write to che ch's stdin\n  inverted.write(data)\n\n  //read from ch's stdout\n  inverted.on('data', ...) \n\n```\n\n## License\n\nMIT\n","_id":"invert-stream@0.0.1","description":"Create a pair of streams (A, B) such that `A.write(X) -> B.emit('data', X)` and `B.write(X) -> A.emit('data', X)`","dist":{"shasum":"dc401f0fafedddb3042b88c0814739b9d66e46d7","tarball":"https://registry.npmjs.org/invert-stream/-/invert-stream-0.0.1.tgz","integrity":"sha512-fA2WMc53mUmf+cnIlnUZ944QDXXRwWzlGHHAiZw0IC25Afzel81BS5ixgnoOJYzDVxtTL0haGPM9CXpBN5BOjQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBzDi+d/hsH6+9IKYqDCsYGuMguc1UvhAzz0I+gR8Z2KAiA7sNb5i2lHOsNuZiA/slbEKK+C3EusaNZdT1Eg3inDvA=="}]},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}}},"readme":"# invert-stream\n\nCreate a pair of streams (A, B) such that `A.write(X) -> B.emit('data', X)`\nand `B.write(X) -> A.emit('data', X)`\n\n``` js\n\nvar invert = require('invert-stream')\n\nvar inverted = invert()\n\nin_steam.pipe(inverted.other).pipe(out_stream)\n\ninverted.write(data_for_outstream)\ninverted.on('data', data_from_in_stream)\n\n## why ?\n\nthis is useful for a couple of things.\n\n  * testing streams based stuff\n  * making flexible duplex stream apis\n\nan `invert-stream` pair is like a tcp connection, \nbut in-process and synchronous. It's way easier to test\nedge cases related to event order if you stuff works sync.\n\nAlso, it's useful making duplex streams, or multiple streams into one.\n\n### Example\n\n```js\n\n  var spawn = require('child_process').spawn\n  var invert = require('invert-stream')\n\n  var ch = spawn(cmd, args)\n  var inverted = invert()\n\n  ch.stdout.pipe(inverted.other).pipe(ch.sdin)\n\n  //now, we have just ONE stream: inverted\n\n  //write to che ch's stdin\n  inverted.write(data)\n\n  //read from ch's stdout\n  inverted.on('data', ...) \n\n```\n\n## License\n\nMIT\n","maintainers":[{"email":"dominic.tarr@gmail.com","name":"dominictarr"},{"email":"nopersonsmodules@gmail.com","name":"nopersonsmodules"}],"time":{"modified":"2022-06-19T01:54:55.787Z","created":"2012-08-24T17:49:44.204Z","0.0.0":"2012-08-24T17:49:47.224Z","0.0.1":"2012-08-25T10:42:47.663Z"},"author":{"name":"'Dominic Tarr'","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"repository":{"type":"git","url":"git://github.com/dominictarr/invert-stream.git"}}